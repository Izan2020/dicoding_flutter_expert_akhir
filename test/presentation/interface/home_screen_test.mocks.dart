// Mocks generated by Mockito 5.4.2 from annotations
// in ditonton/test/presentation/interface/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:bloc/bloc.dart' as _i10;
import 'package:ditonton/presentation/bloc/home/home_bloc.dart' as _i6;
import 'package:ditonton/presentation/bloc/home/home_event.dart' as _i9;
import 'package:ditonton/presentation/bloc/home/home_state.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tvseries/necessary_usecases.dart' as _i2;
import 'package:tvseries/presentation/bloc/series_now_playing/series_now_playing_bloc.dart'
    as _i11;
import 'package:tvseries/presentation/bloc/series_now_playing/series_now_playing_event.dart'
    as _i12;
import 'package:tvseries/presentation/bloc/series_now_playing/series_now_playing_state.dart'
    as _i3;
import 'package:tvseries/presentation/bloc/series_popular/series_popular_bloc.dart'
    as _i13;
import 'package:tvseries/presentation/bloc/series_popular/series_popular_event.dart'
    as _i14;
import 'package:tvseries/presentation/bloc/series_popular/series_popular_state.dart'
    as _i4;
import 'package:tvseries/presentation/bloc/series_top_rated/series_top_rated_bloc.dart'
    as _i15;
import 'package:tvseries/presentation/bloc/series_top_rated/series_top_rated_event.dart'
    as _i16;
import 'package:tvseries/presentation/bloc/series_top_rated/series_top_rated_state.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetPlayingSeries_0 extends _i1.SmartFake
    implements _i2.GetPlayingSeries {
  _FakeGetPlayingSeries_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSeriesNowPlayingState_1 extends _i1.SmartFake
    implements _i3.SeriesNowPlayingState {
  _FakeSeriesNowPlayingState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetPopularSeries_2 extends _i1.SmartFake
    implements _i2.GetPopularSeries {
  _FakeGetPopularSeries_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSeriesPopularState_3 extends _i1.SmartFake
    implements _i4.SeriesPopularState {
  _FakeSeriesPopularState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTopRatedSeries_4 extends _i1.SmartFake
    implements _i2.GetTopRatedSeries {
  _FakeGetTopRatedSeries_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSeriesTopRatedState_5 extends _i1.SmartFake
    implements _i5.SeriesTopRatedState {
  _FakeSeriesTopRatedState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeBloc extends _i1.Mock implements _i6.HomeBloc {
  MockHomeBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i7.HomeState.TvSeries,
      ) as _i7.HomeState);
  @override
  _i8.Stream<_i7.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i7.HomeState>.empty(),
      ) as _i8.Stream<_i7.HomeState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i9.HomeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i9.HomeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i7.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i9.HomeEvent>(
    _i10.EventHandler<E, _i7.HomeState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i10.Transition<_i9.HomeEvent, _i7.HomeState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void onChange(_i10.Change<_i7.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SeriesNowPlayingBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSeriesNowPlayingBloc extends _i1.Mock
    implements _i11.SeriesNowPlayingBloc {
  MockSeriesNowPlayingBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetPlayingSeries get getPlayingSeries => (super.noSuchMethod(
        Invocation.getter(#getPlayingSeries),
        returnValue: _FakeGetPlayingSeries_0(
          this,
          Invocation.getter(#getPlayingSeries),
        ),
      ) as _i2.GetPlayingSeries);
  @override
  _i3.SeriesNowPlayingState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSeriesNowPlayingState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.SeriesNowPlayingState);
  @override
  _i8.Stream<_i3.SeriesNowPlayingState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i3.SeriesNowPlayingState>.empty(),
      ) as _i8.Stream<_i3.SeriesNowPlayingState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i12.SeriesNowPlayingEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i12.SeriesNowPlayingEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.SeriesNowPlayingState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i12.SeriesNowPlayingEvent>(
    _i10.EventHandler<E, _i3.SeriesNowPlayingState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i10.Transition<_i12.SeriesNowPlayingEvent,
                  _i3.SeriesNowPlayingState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void onChange(_i10.Change<_i3.SeriesNowPlayingState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SeriesPopularBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSeriesPopularBloc extends _i1.Mock implements _i13.SeriesPopularBloc {
  MockSeriesPopularBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetPopularSeries get getPopularSeries => (super.noSuchMethod(
        Invocation.getter(#getPopularSeries),
        returnValue: _FakeGetPopularSeries_2(
          this,
          Invocation.getter(#getPopularSeries),
        ),
      ) as _i2.GetPopularSeries);
  @override
  _i4.SeriesPopularState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSeriesPopularState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.SeriesPopularState);
  @override
  _i8.Stream<_i4.SeriesPopularState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i4.SeriesPopularState>.empty(),
      ) as _i8.Stream<_i4.SeriesPopularState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i14.SeriesPopularEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i14.SeriesPopularEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i4.SeriesPopularState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i14.SeriesPopularEvent>(
    _i10.EventHandler<E, _i4.SeriesPopularState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i10.Transition<_i14.SeriesPopularEvent, _i4.SeriesPopularState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void onChange(_i10.Change<_i4.SeriesPopularState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SeriesTopRatedBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSeriesTopRatedBloc extends _i1.Mock
    implements _i15.SeriesTopRatedBloc {
  MockSeriesTopRatedBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTopRatedSeries get getTopRatedSeries => (super.noSuchMethod(
        Invocation.getter(#getTopRatedSeries),
        returnValue: _FakeGetTopRatedSeries_4(
          this,
          Invocation.getter(#getTopRatedSeries),
        ),
      ) as _i2.GetTopRatedSeries);
  @override
  _i5.SeriesTopRatedState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSeriesTopRatedState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.SeriesTopRatedState);
  @override
  _i8.Stream<_i5.SeriesTopRatedState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i5.SeriesTopRatedState>.empty(),
      ) as _i8.Stream<_i5.SeriesTopRatedState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i16.SeriesTopRatedEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i16.SeriesTopRatedEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i5.SeriesTopRatedState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i16.SeriesTopRatedEvent>(
    _i10.EventHandler<E, _i5.SeriesTopRatedState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i10.Transition<_i16.SeriesTopRatedEvent, _i5.SeriesTopRatedState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void onChange(_i10.Change<_i5.SeriesTopRatedState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
